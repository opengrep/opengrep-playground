name: Rolling Release Electron App

on:
  push:
    branches:
      - main # Triggers on every push to `main`
# testing 
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      version_bump:
        description: "Which version to bump? (major, minor, patch, auto)"
        required: true
        default: "auto"
      pre_release_type:
        description: "Pre-release type (leave empty for stable) [alpha, beta, rc]"
        required: false
      custom_tag:
        description: "Custom release tag (optional, overrides auto-tagging)"
        required: false

permissions:
  contents: write 

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build for Windows
        run: npm run make-win

      - name: Upload Windows Artifacts (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: out/make/zip/win32/x64/*

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build for macOS
        run: npm run make-mac

      - name: Upload macOS ZIP
        uses: actions/upload-artifact@v4
        with:
          name: macos-zip
          path: out/make/zip/darwin/arm64/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Install Linux Dependencies
        run: sudo apt-get update && sudo apt-get install -y fakeroot rpm libarchive-tools

      - name: Build for Linux
        run: npm run make-linux

      - name: Upload Linux DEB
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: out/make/deb/x64/*

      - name: Upload Linux RPM
        uses: actions/upload-artifact@v4
        with:
          name: linux-rpm
          path: out/make/rpm/x64/*

      - name: Upload Linux ZIP
        uses: actions/upload-artifact@v4
        with:
          name: linux-zip
          path: out/make/zip/linux/x64/*

  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for commit history analysis


      - name: Download Windows Build (ZIP)
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: out/make/zip/win32/x64

      - name: Download macOS ZIP
        uses: actions/download-artifact@v4
        with:
          name: macos-zip
          path: out/make/zip/darwin/arm64

      - name: Download Linux DEB
        uses: actions/download-artifact@v4
        with:
          name: linux-deb
          path: out/make/deb/x64

      - name: Download Linux RPM
        uses: actions/download-artifact@v4
        with:
          name: linux-rpm
          path: out/make/rpm/x64

      - name: Download Linux ZIP
        uses: actions/download-artifact@v4
        with:
          name: linux-zip
          path: out/make/zip/linux/x64

      - name: List Downloaded Files (Debug)
        run: ls -R out/make/

      - name: Get Latest Release Tag
        id: latest_tag
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "v1.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Automatic Version Bump (If No Manual Input)
        if: github.event.inputs.version_bump == 'auto'
        run: |
          if git log -1 --pretty=%B | grep -q "BREAKING CHANGE"; then
            AUTO_BUMP="major"
          elif git log -1 --pretty=%B | grep -q "feat:"; then
            AUTO_BUMP="minor"
          else
            AUTO_BUMP="patch"
          fi
          echo "AUTO_BUMP=$AUTO_BUMP" >> $GITHUB_ENV

      - name: Determine Next Release Tag
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.custom_tag }}" ]]; then
            TAG=${{ github.event.inputs.custom_tag }}
          else
            VERSION_BUMP=${{ github.event.inputs.version_bump }}
            if [[ "$VERSION_BUMP" == "auto" ]]; then
              VERSION_BUMP=${{ env.AUTO_BUMP }}
            fi

            PRE_RELEASE_TYPE=${{ github.event.inputs.pre_release_type }}

            MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG | cut -d. -f3 | cut -d- -f1)
            IDENTIFIER=$(echo $LATEST_TAG | grep -oE '[0-9]+$' || echo "0")

            PREV_PRE_RELEASE_TYPE=$(echo $LATEST_TAG | grep -oE '(alpha|beta|rc)' || echo "")

            # Handle major, minor, patch bump
            case "$VERSION_BUMP" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                IDENTIFIER=1
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                IDENTIFIER=1
                ;;
              patch)
                PATCH=$((PATCH + 1))
                IDENTIFIER=1
                ;;
              *)
                if [[ "$PREV_PRE_RELEASE_TYPE" == "$PRE_RELEASE_TYPE" ]]; then
                  IDENTIFIER=$((IDENTIFIER + 1))
                else
                  IDENTIFIER=1
                fi
                ;;
            esac

            # If pre-release type is set, format it correctly
            if [[ -n "$PRE_RELEASE_TYPE" ]]; then
              TAG="v${MAJOR}.${MINOR}.${PATCH}-${PRE_RELEASE_TYPE}.${IDENTIFIER}"
              PRERELEASE=true
            else
              TAG="v${MAJOR}.${MINOR}.${PATCH}"
              PRERELEASE=false
            fi
          fi

          echo "Next TAG: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "PRERELEASE=$PRERELEASE" >> $GITHUB_ENV

      - name: Debug Print Environment Variables
        run: |
          echo "Final TAG: ${{ env.TAG }}"
          echo "Pre-release status: ${{ env.PRERELEASE }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "Release - ${{ env.TAG }}"
          body: "ðŸš€ This is a rolling release built from the main branch."
          draft: false
          prerelease: ${{ env.PRERELEASE }}  # Automatically detect if pre-release
          files: |
            out/make/zip/win32/x64/*
            out/make/*.dmg
            out/make/zip/darwin/arm64/*
            out/make/deb/x64/*
            out/make/rpm/x64/*
            out/make/zip/linux/x64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}